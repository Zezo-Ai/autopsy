/*
 * Autopsy Forensic Browser
 *
 * Copyright 2023 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.basistech.df.cybertriage.autopsy.malwarescan;

import org.sleuthkit.autopsy.ingest.IngestModuleIngestJobSettings;

/**
 * Ingest job settings for the Malware scanner module.
 */
final class MalwareScanIngestSettings implements IngestModuleIngestJobSettings {

    private static final long serialVersionUID = 1L;

    private static final boolean DEFAULT_QUERY_FILES = true;
    private static final boolean DEFAULT_UPLOAD_FILES = true;
    
    public boolean queryFiles;
    public boolean uploadFiles;

    /**
     * Instantiate the ingest job settings with default values.
     */
    MalwareScanIngestSettings() {
        this.queryFiles = DEFAULT_QUERY_FILES;
        this.uploadFiles = DEFAULT_UPLOAD_FILES;
    }

    /**
     * Instantiate the ingest job settings.
     * 
     * @param computeHashes  Compute hashes if none are present
     * @param verifyHashes   Verify hashes if any are present
     */
    MalwareScanIngestSettings(boolean queryFiles, boolean uploadFiles) {
        this.queryFiles = queryFiles;
        this.uploadFiles = uploadFiles;
    }

    @Override
    public long getVersionNumber() {
        return serialVersionUID;
    }
    
    /**
     * Should files be queried?
     * 
     * @return true if files should be queried, false otherwise
     */
    public boolean shouldQueryFiles() {
        return queryFiles;
    }
    
    /**
     * Set whether files should be queried.
     * 
     * @param queryFiles true if files should be queried
     */
    void setqueryFiles(boolean queryFiles) {
        this.queryFiles = queryFiles;
    }
    
    
    /**
     * Should files be uploaded?
     * 
     * @return true if files should be uploaded, false otherwise
     */
    public boolean shouldUploadFiles() {
        return uploadFiles;
    }    
    
    /**
     * Set whether files should be uploaded.
     * 
     * @param uploadFiles true if files should be uploaded
     */
    void setUploadFiles(boolean uploadFiles) {
        this.uploadFiles = uploadFiles;
    }
}
