/*
 * Autopsy Forensic Browser
 *
 * Copyright 2023 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.basistech.df.cybertriage.autopsy.malwarescan;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

/**
 * Processes a batch when number of items reaches batchSize or flush. Processing
 * blocks (and subsequently add and flush operations) until previous batch
 * finishes.
 */
class BatchProcessor<T> {

    private ExecutorService processingExecutorService = Executors.newSingleThreadExecutor();

    private final BlockingQueue<T> batchingQueue;
    private final int batchSize;
    private final Consumer<List<T>> itemsConsumer;
    private final long secondsTimeout;

    public BatchProcessor(int batchSize, long secondsTimeout, Consumer<List<T>> itemsConsumer) {
        this.batchingQueue = new LinkedBlockingQueue<>(batchSize);
        this.batchSize = batchSize;
        this.itemsConsumer = itemsConsumer;
        this.secondsTimeout = secondsTimeout;
    }

    public synchronized void add(T item) throws InterruptedException {
        batchingQueue.add(item);
        if (batchingQueue.size() >= batchSize) {
            asyncProcessBatch();
        }
    }

    public synchronized void flushAndReset() throws InterruptedException {
        // get any remaining
        asyncProcessBatch();
        
        // don't accept any new additions
        processingExecutorService.shutdown();
        
        // await termination
        processingExecutorService.awaitTermination(secondsTimeout, TimeUnit.SECONDS);
        
        // get new (not shut down executor)
        processingExecutorService = Executors.newSingleThreadExecutor();
    }

    private synchronized void asyncProcessBatch() throws InterruptedException {
        if (!batchingQueue.isEmpty()) {
            final List<T> processingList = new ArrayList<>();

            // transfer batching queue to processing queue
            batchingQueue.drainTo(processingList);

            // submit to be processed
            processingExecutorService.submit(() -> itemsConsumer.accept(processingList));
        }
    }

}
