/*
 * Autopsy Forensic Browser
 *
 * Copyright 2023 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.basistech.df.cybertriage.autopsy.malwarescan;

import com.basistech.df.cybertriage.autopsy.ctoptions.CTOptionsPanel;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.ingest.FileIngestModule;
import org.sleuthkit.autopsy.ingest.IngestModuleFactoryAdapter;
import org.sleuthkit.autopsy.ingest.IngestModuleGlobalSettingsPanel;
import org.sleuthkit.autopsy.ingest.IngestModuleIngestJobSettings;
import org.sleuthkit.autopsy.ingest.IngestModuleIngestJobSettingsPanel;
import org.sleuthkit.autopsy.ingest.NoIngestModuleIngestJobSettings;

/**
 * Factory for malware scan ingest modules.
 */
@ServiceProvider(service = org.sleuthkit.autopsy.ingest.IngestModuleFactory.class)
@Messages({
    "MalwareScanIngestModuleFactory_displayName=Cyber Triage Malware Scanner",
    "MalwareScanIngestModuleFactory_description=Identifies executable files with malware.",
    "MalwareScanIngestModuleFactory_version=1.0.0"
})
public class MalwareScanIngestModuleFactory extends IngestModuleFactoryAdapter {

    /**
     * @return The display name for the factory (static method).
     */
    public static String getDisplayName() {
        return Bundle.MalwareScanIngestModuleFactory_displayName();
    }

    @Override
    public String getModuleDisplayName() {
        return MalwareScanIngestModuleFactory.getDisplayName();
    }

    @Override
    public String getModuleDescription() {
        return Bundle.MalwareScanIngestModuleFactory_description();
    }

    @Override
    public String getModuleVersionNumber() {
        return Bundle.MalwareScanIngestModuleFactory_version();
    }

    @Override
    public boolean isFileIngestModuleFactory() {
        return true;
    }

    @Override
    public FileIngestModule createFileIngestModule(IngestModuleIngestJobSettings ingestOptions) {
        return new MalwareScanIngestModule((MalwareScanIngestSettings) ingestOptions);
    }

    @Override
    public boolean hasGlobalSettingsPanel() {
        return true;
    }

    @Override
    public IngestModuleGlobalSettingsPanel getGlobalSettingsPanel() {
        CTOptionsPanel optionsPanel = new CTOptionsPanel();
        optionsPanel.loadSavedSettings();
        return optionsPanel;
    }

    @Override
    public boolean hasIngestJobSettingsPanel() {
        return true;
    }

    @Override
    public IngestModuleIngestJobSettingsPanel getIngestJobSettingsPanel(IngestModuleIngestJobSettings settings) {
        if (settings instanceof MalwareScanIngestSettings) {
            return new MalwareScanIngestSettingsPanel((MalwareScanIngestSettings) settings);
        }
        /*
         * Compatibility check for older versions.
         */
        if (settings instanceof NoIngestModuleIngestJobSettings) {
            return new MalwareScanIngestSettingsPanel(new MalwareScanIngestSettings());
        }
        
        throw new IllegalArgumentException("Expected settings argument to be an instance of IngestSettings");
    }
}
